import { prog } from './_';
import { resolvePackage } from '@yarn-tool/resolve-package';
import { readJSONSync } from 'fs-extra';
import { paths } from '../../constants';
import { resolve } from 'path';
import { firstPackageBin, getPackageBins } from '@yarn-tool/get-pkg-bin/util';
import { createProgressEstimator } from '../../createProgressEstimator';
import execa from 'execa';

prog
	.command('dts')
	.describe('Run DTS Bundle Generator')
	.option('-o', 'File name of generated d.ts')
	.option('--no-banner', 'Allows remove "Generated by dts-bundle-generator" comment from the output')
	.option('--no-check', 'Skip validation of generated d.ts file')
	.option('--inline-declare-global', 'Enables inlining of `declare global` statements contained in file which should be inlined', true)
	.option('--inline-declare-externals', 'Enables inlining of `declare module` statements of the global modules', true)
	.action(
		async (opts: {
			o: string;
			_: string[];
			'no-banner'?: boolean,
			'no-check'?: boolean,
		}) =>
		{
			console.log('Run DTS Bundle Generator');

			const _r = resolvePackage('dts-bundle-generator');
			const appPackageJson = readJSONSync(paths.appPackageJson);
			const _bin = resolve(_r.pkgRoot, firstPackageBin(getPackageBins(_r.pkg)));

			const outputFile = opts.o ?? appPackageJson.types ?? appPackageJson.typings ?? 'dist/index.d.ts';
			const inputFile = opts._?.[0] ?? 'src/index.ts';

			console.log(`Input: ${inputFile}\nOutput: ${outputFile}`);

			const logger = await createProgressEstimator();

			let p = execa('node', [
				_bin,
				'-o',
				outputFile,
				inputFile,
				opts['no-banner'] && '--no-banner',
				opts['no-check'] && '--no-check',
				opts['inline-declare-global'] && '--inline-declare-global',
				opts['inline-declare-externals'] && '--inline-declare-externals',
				...opts._?.slice(1),
			].filter((v) => v !== undefined && v !== null), {
				stdio: 'pipe',
			});

			await logger(p, `Creating DTS Bundle`);

			return
		}
	);
